<%
include("/jagg/jagg.jag");

(function () {
    response.contentType = "application/json; charset=UTF-8";
    var log = new Log();
    var api = jagg.module("api");
    var manager = jagg.module("manager");
    var mod = jagg.module("user");
    var carbon = require('carbon');
    var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var Tenant = Packages.org.wso2.carbon.user.api.Tenant;
    var Date = Packages.java.util.Date;
    var UserRealm = Packages.org.wso2.carbon.user.core.UserRealm;
    var UserStoreManager = Packages.org.wso2.carbon.user.core.UserStoreManager;
    var Permission = Packages.org.wso2.carbon.user.api.Permission;
    var requestedURI = session.get("PUBLISHER_REDIRECT_URI");
    if (requestedURI == null) {
        log.error("requestedURI value is invalid.");
        requestedURI = "/store";
    }
    var username, oidc_username,tenantDomain = request.getParameter("tenant"),
            action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag"),
            obj = {}, failed= false;
    if (action === "login" && request.getMethod() == 'POST') {
        oidc_username = session.get("LOGGED_IN_USER");
        if (oidc_username) {
            username = oidc_username.trim();
        }
        log.info("loggedin user: " + username);		
        var user= MultitenantUtils.getTenantAwareUsername(username);
		username = user + "@" + tenantDomain;
		log.info("final username: " + username);     
        try{
			var coreRealmService = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService');
			var tenantId = coreRealmService.getTenantManager().getTenantId(tenantDomain);
			var coreUserRealm ,coreUserStoreManager;
        	log.info("tenantId: " + tenantId);
        	var SecureRandom = Packages.java.security.SecureRandom;
        	var random = new SecureRandom();
        	var BigInteger = Packages.java.math.BigInteger;
        	var password = new BigInteger(130, random).toString(32)+"";
        	var realmConfig = coreRealmService.getBootstrapRealmConfiguration();
        	var date = new Date();
        	
        	//It is possible to create the tenant even if the role is not provider,it simply doesn't assign admin role to the first created user
        	if(tenantId == -1){        		
        		var tenantBean = new Tenant();
        		tenantBean.setRealmConfig(realmConfig);
        		tenantBean.setAdminName(user);
        		tenantBean.setAdminPassword(password);
        		tenantBean.setEmail(user);
        		tenantBean.setCreatedDate(date);
        		tenantBean.setDomain(tenantDomain);
        		tenantBean.setActive(true);
        		coreRealmService.getTenantManager().addTenant(tenantBean);
        		
        		tenantId = coreRealmService.getTenantManager().getTenantId(tenantDomain);
        		log.info("tenantId: " + tenantId);
        		// activate tenant if not yet activated
        		var isTenantActive = coreRealmService.getTenantManager().isTenantActive(tenantId);
        		log.info("isTenantActive : ");log.info(isTenantActive);
        		if(!isTenantActive)
        			coreRealmService.getTenantManager().activateTenant(tenantId);
        		
        		// check if admin user of the tenant is already created 
        		coreUserRealm = coreRealmService.getTenantUserRealm(tenantId);
        		coreUserStoreManager = coreUserRealm.getUserStoreManager();
        		var rolePublisherExists = coreUserStoreManager.isExistingRole("Internal/publisher", false);
        		var roleCreatorExists = coreUserStoreManager.isExistingRole("Internal/creator", false);
        		var roleSubscriberExists = coreUserStoreManager.isExistingRole("Internal/subscriber", false);

        		var permissionsLogin = new Permission("/permission/admin/login","ui.execute");
        		var permissionsPublish = new Permission("/permission/admin/manage/api/publish","ui.execute");
        		var permissionsCreate = new Permission("/permission/admin/manage/api/create","ui.execute");
        		var permissionsSubscribe = new Permission("/permission/admin/manage/api/subscribe","ui.execute");
        		
        		var permissions1 = new Permission("/permission/admin/configure/governance","ui.execute");
        		var permissions2 = new Permission("/_system/governance/trunk","http://www.wso2.org/projects/registry/actions/get");
        		var permissions3 = new Permission("/_system/governance/trunk","http://www.wso2.org/projects/registry/actions/add");
        		var permissions4 = new Permission("/_system/governance/trunk","http://www.wso2.org/projects/registry/actions/delete");
        		var permissions5 = new Permission("/_system/governance/apimgt/applicationdata","http://www.wso2.org/projects/registry/actions/get");
        		var permissions6 = new Permission("/_system/governance/apimgt/applicationdata","http://www.wso2.org/projects/registry/actions/add");
        		var permissions7 = new Permission("/_system/governance/apimgt/applicationdata","http://www.wso2.org/projects/registry/actions/delete");
        		var permissions8 = new Permission("/permission/admin/manage/resources/govern","ui.execute");
        		var permissions9 = new Permission("/permission/admin/manage/resources/govern/api/add","ui.execute");
        		var permissions10 = new Permission("/permission/admin/manage/resources/govern/api/list","ui.execute");
        		var permissions11 = new Permission("/permission/admin/manage/resources/govern/document","ui.execute");
        		var permissions12 = new Permission("/permission/admin/manage/resources/govern/generic","ui.execute");
        		var permissions13 = new Permission("/permission/admin/manage/resources/govern/lifecycles","ui.execute");
        		var permissions14 = new Permission("/permission/admin/manage/resources/govern/metadata","ui.execute");
        		var permissions15 = new Permission("/permission/admin/manage/resources/govern/provider","ui.execute");
        		var permissions16 = new Permission("/permission/admin/manage/resources/govern/reply","ui.execute");
        		var permissions17 = new Permission("/permission/admin/manage/resources/govern/topic","ui.execute");
        		
        		coreUserStoreManager.addUser(user,password,[], {},"default"); 
        		if(!rolePublisherExists){
        			log.info("creating role publisher");
        			coreUserStoreManager.addRole("Internal/publisher",[],[permissionsLogin,permissionsPublish],false);
        		}
        		if(!roleCreatorExists){
        			log.info("creating role creator");
        			coreUserStoreManager.addRole("Internal/creator",[],[permissionsLogin,permissionsCreate,permissionsPublish,permissionsSubscribe,
																		permissions1,permissions2,permissions3,permissions4,
																		permissions5,permissions6,permissions7,permissions8,
																		permissions9,permissions10,permissions11,permissions12,
																		permissions13,permissions14,permissions15,permissions16,
																		permissions17],false);
        		}
        		if(!roleSubscriberExists){
        			log.info("creating role subscr");
        			coreUserStoreManager.addRole("Internal/subscriber",[],[permissionsLogin,permissionsSubscribe],false);
        		}
        		log.info("Assigning roles to the new user");
        		coreUserStoreManager.updateRoleListOfUser(user, [],["admin","Internal/creator","Internal/publisher","Internal/subscriber"]);
        		jagg.setUser({username: username, cookie: null});
        		session.put("LOGGED_IN_USER", username);
        		
        		log.info("load tenant registry");
        		jagg.module("manager").loadTenantRegistry(String(tenantDomain));
        		jagg.module("manager").loadTenantAxisConfiguration(String(tenantDomain));
        		var isCreatePermitted = api.hasCreatePermission();
        		var isPublishPermitted = api.hasPublishPermission();
        		log.info("is create permitted? "); log.info(isCreatePermitted);
        		var showStoreURL = api.showStoreURL();
        		var hasTierPermission = api.hasManageTierPermission();
        		jagg.setCreatePermitted(isCreatePermitted);
        		jagg.setPublishPermitted(isPublishPermitted);
        		jagg.setManageTierPermitted(hasTierPermission);
        		jagg.setShowStoreURL(showStoreURL);
        		
        		obj = {
        		     error:false,
        		};
        		print(obj);
        	} else{
        		coreUserRealm = coreRealmService.getTenantUserRealm(tenantId);
        		coreUserStoreManager = coreUserRealm.getUserStoreManager();
        		var userExist = coreUserStoreManager.isExistingUser(user);
        		log.info(tenantId + " Tenant exists. Does the user exist? ");
        		log.info(userExist);
        		if(!userExist) {
        			coreUserStoreManager.addUser(user,password,[], {},"another");
        			log.info("assigning roles to the new user");
        			coreUserStoreManager.updateRoleListOfUser(user, [],["admin","Internal/creator","Internal/publisher","Internal/subscriber"]);
        		} else{
        			coreUserStoreManager.updateRoleListOfUser(user, [], ["admin","Internal/creator","Internal/publisher","Internal/subscriber"]);
        		}
        		jagg.setUser({username: username, cookie: null});
        		session.put("LOGGED_IN_USER", username);
        		
        		log.info("load tenant registry");
        		jagg.module("manager").loadTenantRegistry(String(tenantDomain));
        		jagg.module("manager").loadTenantAxisConfiguration(String(tenantDomain));
		        var isCreatePermitted = api.hasCreatePermission();
		        log.info("is create permitted? ");
		        log.info(isCreatePermitted);
		        var isPublishPermitted = api.hasPublishPermission();
		        var showStoreURL = api.showStoreURL();
		        var hasTierPermission = api.hasManageTierPermission();
		        log.info("is publish permitted? ");
		        log.info(isPublishPermitted);
		        jagg.setCreatePermitted(isCreatePermitted);
		        jagg.setPublishPermitted(isPublishPermitted);
		        jagg.setManageTierPermitted(hasTierPermission);
		        jagg.setShowStoreURL(showStoreURL);
		        
		        obj = {
		        	error:false
		        }    
		        print(obj);
        	}
        } catch(e){
        	obj = {
        	    error:true,
        	    message:"Error during tenant,role and user provisioning!"
        	};
        	print(obj);
        }
    } 
}());
%>

