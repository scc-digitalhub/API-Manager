<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
(function () {
    include("jagg.jag");
    include("jaggery_roles.jag");
    var i18n = require("i18n");
    var mod = jagg.module("user");
    var api = jagg.module("api");
    var localeResourcesBasePath = "/site/conf/locales/jaggery/";
    i18n.init(request, localeResourcesBasePath);

    var site = require("/site/conf/site.json");
    var log = new Log();

    var authorizationCode = request.getParameter("code");
    var state = request.getParameter("state");

    // check for state, if it doesn't match we bail early
    if (session.get("STATE") != state) {
        log.error("STATE does not match. Hence redirecting to error page. Sign-in fails.");
        response.sendRedirect("../site/pages/error-pages/401.html");

        return;
    }

    // create a sso relying party js object
    var security = require("oidc");
    var oidcRelyingParty = new security.OIDCRelyingParty(site.oidcConfiguration.issuer);


    var sessionId = session.getId();
    var requestedURI = session.get("STORE_REDIRECT_URI");

    if (requestedURI == null) {
        log.error("requestedURI value is invalid.");
        requestedURI = site.context;
    }

    // Check OIDC signature valid and set session as a authenticated if success
    var claims = jagg_roles.validateOIDCSignature(authorizationCode,session.get("NONCE"), sessionId);
    if (!claims) { 
        log.error("OIDC signature verification is failed.");
        response.sendRedirect("../site/pages/error-pages/401.html");
        return;
    }
    var username = user = ''+jagg_roles.getLoggedInUser(claims);
    var roles = jagg_roles.getRoles(claims);
    
	session.put("LOGGED_IN_USER", username);
	log.debug("username: " + username);
	
    session.put("showLogin", "false");

    var userExist = mod.checkIfUserExsits(username);
    if(userExist) {
    	log.debug("User already exists");
    }         
    else {
    	 var SecureRandom = Packages.java.security.SecureRandom;
    	 var random = new SecureRandom();
    	 var BigInteger = Packages.java.math.BigInteger;
    	 var password = new BigInteger(130, random).toString(32)+"";
         result = mod.addUser(username, password, "");

         subscriberCheckResult = mod.checkIfSubscriberRolePresent(username);
         log.info("subscriberCheckResult: "); log.info(subscriberCheckResult);
    }

    var isUserPermitted = api.hasUserPermissions(username);
    var hasPublisherAccess = api.hasPublisherAccess(username);
    var oidcUser = username; //oidcRelyingParty.getLoggedInUser(sessionId);

    
    // Group ID feature not supported here
    var groupId="";
    session.put("groupId", groupId)

    //First check whether user is having sufficent permissions [create/publish]
    if (!isUserPermitted.permitted) {
        log.warn("User not permitted");
        //oidcRelyingParty.invalidateSessionBySessionId(sessionId);
        response.sendRedirect("../site/pages/error-pages/401.html");
        return;

    } else {
        jagg.setUser({username: oidcUser, cookie: null, hasPublisherAccess: hasPublisherAccess});
        session.put("LOGGED_IN_USER", oidcUser);
        var manager = jagg.module("manager");
        var store = manager.getAPIStoreObj();
        var subscriber = store.getSubscriber(username);
        log.info("isSubscriber? ");
        log.info(subscriber);
        if (!subscriber) {
            store.addSubscriber(username, groupId);
            subscriber = store.getSubscriber(username);
            log.info("Adding new subscriber");
        }
        log.info("has publisher access: ");
        log.info(hasPublisherAccess);
        session.put("hasPublisherAccess", hasPublisherAccess);
        response.sendRedirect(requestedURI);
    }

}());
%>
</body>
</html>


