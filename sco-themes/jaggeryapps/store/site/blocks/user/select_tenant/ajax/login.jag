<%
include("/jagg/jagg.jag");

(function () {
    response.contentType = "application/json; charset=UTF-8";
    var log = new Log();
    var api = jagg.module("api");
    var manager = jagg.module("manager");
    var mod = jagg.module("user");
    var carbon = require('carbon');
    var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var requestedURI = session.get("STORE_REDIRECT_URI");
    if (requestedURI == null) {
        log.error("requestedURI value is invalid.");
        requestedURI = "/store";
    }
    var username, oidc_username,tenantDomain = request.getParameter("selected_tenant"),
            action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag"),
            obj = {}, failed= false;
    log.info("tenant Domain: ");
    log.info(tenantDomain);
    if (action === "login" && request.getMethod() == 'POST') {
        oidc_username = session.get("LOGGED_IN_USER");
        if (oidc_username) {
            username = oidc_username.trim();
        }
        log.info("loggedin user: " + username);		
        var user= MultitenantUtils.getTenantAwareUsername(username);
		username = user + "@" + tenantDomain;
		log.info("final username: " + username);     
        try{
        	var tenantid = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService').getTenantManager().getTenantId(tenantDomain);
        	log.info("tenantId: " + tenantid);
        	if(tenantid == -1){
        		obj = {
        		     error:true,
        		     message:"Tenant "+ tenantDomain +" does not exist"
        		};
        		print(obj);
        	} else{
        		jagg.setUser({username: username, cookie: null, hasPublisherAccess: hasPublisherAccess});
        		session.put("LOGGED_IN_USER", username);
        		var groupId="";
        		session.put("groupId", groupId)
		        var hasPublisherAccess = api.hasPublisherAccess(username);
		        var manager = jagg.module("manager");
                var store = manager.getAPIStoreObj();
                var subscriber = store.getSubscriber(username);
                if (!subscriber) {
                    store.addSubscriber(username, groupId);
                    subscriber = store.getSubscriber(username);
                }
                session.put("hasPublisherAccess", hasPublisherAccess);
		        obj = {
		        	error:false
		        }    
		        print(obj);
        	}
        } catch(e){
        	obj = {
        	    error:true,
        	    message:"Tenant "+ tenantDomain +" is invalid"
        	};
        	print(obj);
        }
        
    } 
}());
%>
