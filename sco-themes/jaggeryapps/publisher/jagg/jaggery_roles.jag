<% 

var site = require("/site/conf/site.json");
var jagg_roles = jagg_roles || (function () {
     
    var access_token;
    var id_token;
    var userName;
    var rolesList = {};
    var String = 				Packages.java.lang.String;
    var Base64 = 				Packages.com.nimbusds.jose.util.Base64;
    var InputStreamReader = 	Packages.java.io.InputStreamReader;
    var Math = 					Packages.java.lang.Math;
    var JWTParser = 			Packages.com.nimbusds.jwt.JWTParser;
    var PlainJWT = 				Packages.com.nimbusds.jwt.PlainJWT;
    var SignedJWT = 			Packages.com.nimbusds.jwt.SignedJWT;
    var JWKSet = 				Packages.com.nimbusds.jose.jwk.JWKSet;
    var JWK = 					Packages.com.nimbusds.jose.jwk.JWK;
    var JWSVerifier =			Packages.com.nimbusds.jose.JWSVerifier;
    var Util = 					Packages.org.wso2.carbon.apimgt.hostobjects.oidc.internal.Util;
    var ServerConfiguration = 	Packages.org.wso2.carbon.apimgt.hostobjects.oidc.internal.ServerConfiguration;
    var AuthClient = 			Packages.org.wso2.carbon.apimgt.hostobjects.oidc.internal.AuthClient;
    var log = new Log();
    

var getServerConfiguration = function() {

        var serverConfiguration = new ServerConfiguration();

        serverConfiguration.setIssuer(site.oidcConfiguration.identityProviderURI);
        log.info("issuer" + site.oidcConfiguration.identityProviderURI);
        serverConfiguration.setJwksUri(site.oidcConfiguration.jwksURI);
        serverConfiguration.setUserInfoUri(site.oidcConfiguration.userInfoURI);
        serverConfiguration.setTokenEndpointUri(site.oidcConfiguration.tokenEndpointURI);
        return serverConfiguration;
};

var getClientConfiguration = function() {

        var authClient = new AuthClient();

        authClient.setClientId(site.oidcConfiguration.clientConfiguration.clientId);
        authClient.setClientSecret(site.oidcConfiguration.clientConfiguration.clientSecret);
        authClient.setAuthorizationType(site.oidcConfiguration.clientConfiguration.authorizationType);
        authClient.setRedirectURI(site.oidcConfiguration.clientConfiguration.redirectURI);
        authClient.setClientAlgorithm(site.oidcConfiguration.clientConfiguration.clientAlgorithm);
        return authClient;

};

var getRolesFromEP = function(authenticationToken){
    	
		var url = site.oidcConfiguration.rolesEndpointURI;
        var headers = {"Authorization":"Bearer " + authenticationToken,"Accept":"application/json"};
        var response = get(url,null,headers,"json");

        return response.data;
};

var getUserInfoFromRP = function (token) {

        var url = site.oidcConfiguration.userInfoURI;
        var headers = {"Authorization":"Bearer " + token,"Accept":"application/json"};
        var response = get(url,null,headers,"json");

        return response.data;
};

var getTokenFromTokenEP = function(code) {

        // Client details
        var clientId = site.oidcConfiguration.clientConfiguration.clientId;
        var clientSecret = site.oidcConfiguration.clientConfiguration.clientSecret;
        var authorizationType = site.oidcConfiguration.clientConfiguration.authorizationType;
        var redirectURI = site.oidcConfiguration.clientConfiguration.redirectURI;

        var url = site.oidcConfiguration.tokenEndpointURI;
        var data = {"grant_type":authorizationType,"code":code,"redirect_uri":redirectURI};
        log.info(data);
        var headers = {"Authorization":"Basic " + Base64.encode(clientId+":"+clientSecret),"Content-Type":"application/x-www-form-urlencoded"};
        var response = post(url,data,headers,"json");
        if(response.data.error == null){
        	access_token = response.data.access_token;
        } else{
        	log.info("Error when retrieving access_token: "+response.data.error);
        }
        if(response.data.id_token != null){
        	id_token = response.data.id_token;
        }
        log.info("Response from Token Endpoint : " + access_token);

        return access_token;
};

var getUserName = function(token) {

        var userInfoJson = getUserInfoFromRP(token);
        
        if (userInfoJson.preferred_username != null) {
            userName = userInfoJson.preferred_username;
            log.info("User name taken from user info endpoint : " + userName);
        } else {
           log.info("User Info JSON did not return an preferred_username");
        }
        return userName;
};

var getLoggedInUser = function(){
	return userName;
};

var getRolesList = function () {
    	  	
    	var rolesResponse = getRolesFromEP(access_token);
    	if (rolesResponse== null) {
            throw new Exception("Roles Endpoint did not return a valid JSON object: " + rolesResponse);
        } else {      	
			var roleName,context,space,definedContext,tempRole = [];
			definedContext = site.oidcConfiguration.clientConfiguration.context;
			var length = Math.round(rolesResponse.length);
			for(var i = 0;i<length;i++) {
				var entityRow = rolesResponse[i];
				log.info(entityRow.context);
				log.info(entityRow.space);
				log.info(entityRow.role);
				if(entityRow.context != null && entityRow.space != null && entityRow.role != null) {
					roleName = entityRow.role;
					context = entityRow.context;
					space = entityRow.space;
					log.info("currentRoleName: "+roleName+ " currentContext: "+context+" currentSpace: "+space+" definedContext: "+definedContext);
					if (context.equals(definedContext)) {
						if(rolesList[space] == undefined || rolesList[space] != "ROLE_PROVIDER"){
							rolesList[space] = roleName;
							//rolesList.push(tempRole);
						}
					}
				}
			} 
        }
        log.info(rolesList);
    	return rolesList;
};

var validateSignature = function(serverConfiguration, authClient, idToken, nonce) {

        var isSignatureValid;
        var idToken = JWTParser.parse(idToken);
        var idClaims = idToken.getJWTClaimsSet();

        // Supports only signedJWT
        if (idToken instanceof SignedJWT) {
            var signedIdToken = idToken;
            isSignatureValid = Util.verifySignature(signedIdToken, serverConfiguration);   

        } else if (idToken instanceof PlainJWT) {
            log.info("Plain JWT not supported");

        } else {
            log.info("JWT type not supported");
        }

        var isValidClaimSet = Util.validateIdClaims(serverConfiguration, authClient, idToken, nonce, idClaims);  
        return  isSignatureValid && isValidClaimSet;
};

var validateOIDCSignature = function(authorizationCode, storedNonce, sessionId) {

        log.info("Validating OIDC signature");
        var isSignatureValid;
        
        var oidcAuthenticationToken = getTokenFromTokenEP(authorizationCode);
        var serverConfiguration = getServerConfiguration();
        var authClient = getClientConfiguration();

        userName = getUserName(oidcAuthenticationToken);
        log.info("userName: " + userName);

        if (userName == null || userName.equals("")) {
            log.info("Authentication Request is rejected. " + "User Name is Null");
            return false;
        }
        isSignatureValid = validateSignature(serverConfiguration, authClient, id_token, storedNonce);      

        return isSignatureValid;
};


return {
        getRolesList:getRolesList,
		getLoggedInUser:getLoggedInUser,
        validateOIDCSignature:validateOIDCSignature
    };

}());

%>

