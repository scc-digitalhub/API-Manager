<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
(function () {
    include("jagg.jag");
    include("jaggery_roles.jag");
    var site = require("/site/conf/site.json");
    var MultitenantConstants = 	Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
    var MultitenantUtils = 		Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var log = new Log();

    var authorizationCode = request.getParameter("code");
    var state = request.getParameter("state");


    // check for state, if it doesn't match we bail early
    if (session.get("STATE") != state) {
        log.error("STATE does not match. Hence redirecting to error page. Sign-in fails.");
        response.sendRedirect("../site/pages/error-pages/401.html");
        return;
    }

    // create a sso relying party js object
    var security = require("oidc");
    var oidcRelyingParty = new security.OIDCRelyingParty(site.oidcConfiguration.issuer);

    var sessionId = session.getId();
    var requestedURI = session.get("PUBLISHER_REDIRECT_URI");

    if (requestedURI == null) {
        log.error("requestedURI value is invalid.");
        requestedURI = "/store";
    }

    // Check OIDC signature valid and set session as a authenticated if success
    var isSignatureValid = jagg_roles.validateOIDCSignature(authorizationCode,session.get("NONCE"), sessionId);
    var rolesList = jagg_roles.getRolesList();
    var rolesCount = Math.round(rolesList.length);
    var username = jagg_roles.getLoggedInUser();
    if(rolesCount == 1){
	    var domain= rolesList[0];
	    username = username + "@" + domain;
    }
	session.put("rolesList", rolesList);
	session.put("LOGGED_IN_USER", username);
	log.info("username: " + username);
	log.info("rolesCount: " + rolesCount);
	log.info("rolesCount > 1 ");
	log.info(rolesCount > 1);
	if(rolesCount > 1){
	    log.info("rolesCount > 1 ");
	    response.sendRedirect(jagg.getAbsoluteUrl("/site/pages/select_tenant.jag"));
	    return;
	}
    if (!Boolean(isSignatureValid) || rolesCount == 0) { 
        log.error("OIDC signature is verification failed.");
        response.sendRedirect("../site/pages/error-pages/401.html");
        return;
    }

    session.put("showLogin", "false");
    var api = jagg.module("api");
    var isUserCreatePermitted = api.hasUserPermissions(username);

    //First check whether user is having sufficent permissions [create/publish]
    if (isUserCreatePermitted.permitted) {
        jagg.setUser({username: username, cookie: null});
        session.put("LOGGED_IN_USER", username);
    } else {
       //oidcRelyingParty.invalidateSessionBySessionId(sessionId);
       response.sendRedirect("../site/pages/error-pages/403.html");
       return;
    }
            
    var isCreatePermitted = api.hasCreatePermission();
    var isPublishPermitted = api.hasPublishPermission();
    var showStoreURL = api.showStoreURL();
    var hasTierPermission = api.hasManageTierPermission();
    jagg.setCreatePermitted(isCreatePermitted);
    jagg.setPublishPermitted(isPublishPermitted);
    jagg.setManageTierPermitted(hasTierPermission);
    jagg.setShowStoreURL(showStoreURL);
    response.sendRedirect(requestedURI);

}());
%>
</body>
</html>



